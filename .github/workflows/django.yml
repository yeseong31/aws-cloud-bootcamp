# Actions 작업명
name: AWS Cloud Bootcamp - Django CI
# 환경 변수
env:
  SECRET_KEY: ${{ envs.SECRET_KEY }}
  DJANGO_DEBUG: ${{ envs.DJANGO_DEBUG }}
  ELASTIC_HOST: ${{ envs.ELASTIC_HOST }}
  DOMAIN_NAME: ${{ envs.DOMAIN_NAME }}
  DB_ENGINE: ${{ envs.DB_ENGINE }}
  DB_USER: ${{ envs.DB_USER }}
  DB_PASSWORD: ${{ envs.DB_PASSWORD }}
  DB_HOST: ${{ envs.DB_HOST }}
  DB_PORT: ${{ envs.DB_PORT }}
  NOTION_TOKEN: ${{ envs.NOTION_TOKEN }}
  EB_APPLICATION_NAME: ${{ envs.EB_APPLICATION_NAME }}
  EB_ENVIRONMENT_NAME: ${{ envs.EB_ENVIRONMENT_NAME }}
  BUCKET_NAME: ${{ envs.BUCKET_NAME }}
  AWS_REGION: ap-northeast-2
  DEPLOY_PACKAGE_NAME: "django-app-${{ github.sha }}.zip"

# 이벤트 바인딩: main 브랜치에 push 이벤트 발생 시 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 이벤트 발생 시 아래 작업들 실행
jobs:
  # 작업 분류: 빌드
  build:

    # 운영 체제 설정: Ubuntu
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    # 작업의 세부 단계 설정
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # 패키지 설치
      - name: install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install eventlet==0.30.2

      # 로그 파일 위치 지정
      - name: make logs dir
        run: |
          cd ~
          mkdir logs

      # 압축 파일 생성
      - name: Create zip deployment package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

      # S3 업로드
      드 name: Copying file to S3
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.BUCKET_NAME }}/

      # echo CI 완료 메시지
      - name: Print message on success finish
        run: echo "CI part finished successfully"


  # 작업 분류: 배포
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_MANAGER_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_MANAGER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Create new EBL app ver
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "${{ github.sha }}"

      - name: Deploy new app
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "${{ github.sha }}"
      - name: Print message on success finish
        run: echo "CD part finished successfully"
